%%
%   INIT STUFF
%%
cd(fileparts(mfilename('fullpath')));
clear;
close all;
clc;

pause(3);
%%
% CONNECTION TO VREP
%%

[clientID,vrep] = init_connection();


% For sync purposes (see below)
sync = false; 

%%
% COLLECTING HANDLES
%%

% vision sensor
[~, h_VS]=vrep.simxGetObjectHandle(clientID, 'Vision_sensor_ECM', vrep.simx_opmode_blocking);

% force sensor
[~, h_FS]=vrep.simxGetObjectHandle(clientID, 'Force_sensor', vrep.simx_opmode_blocking);

% end effector
[~, h_EE]=vrep.simxGetObjectHandle(clientID, 'FollowedDummy', vrep.simx_opmode_blocking);


% here you have to insert handles of RCM and h_j6 (maybe) to get desired
% pose in relative frame (not absolute -1)

% reference for direct kin
[~, h_RCM] = vrep.simxGetObjectHandle(ID, 'RCM_PSM1', vrep.simx_opmode_blocking);
[~, h_j6] = vrep.simxGetObjectHandle(ID,'J3_TOOL1',vrep.simx_opmode_blocking);
relativeToObjectHandle = h_RCM;



% preallocating for speed
h_L = zeros(4,5); % here i save handles of landmarks
h_L_EE = zeros(4,5); % here i save handles of balls attacched to EE

% landmarks attached to goal positions : 
% we have 5 location to achieve
% each location has 4 landmarks

for b=1:4 % each spot has 4 balls
    for s=1:5 % 5 total spots
        [~, h_L(b,s)]=vrep.simxGetObjectHandle(clientID, ['Landmark', num2str(s), num2str(b)], vrep.simx_opmode_blocking);
    end
end

% landmarks attached to EE -> 'LandmarkEE1,2,3,4'
for b=1:4
    [~, h_L_EE(b)]=vrep.simxGetObjectHandle(clientID, ['LandmarkEE', num2str(b)], vrep.simx_opmode_blocking);
end

%%
%   SETTINGS
%%

% landmarks colors (old)
% grays=[0.8; 0.6; 0.4; 0.2]*255;     %landmarks' gray shades

% focal length (depth of the near clipping plane)
fl = 0.01;

% control gain in mode 0 (see below)
K = eye(6)*(10^-2);

% control gain in mode 1 (see below)
H = eye(6)*(10^-1);

% compliance matrix of manipulator
COMPLIANCE = eye(6)*(10^-1);

% preallocating for speed
us_desired = zeros(4,5);
vs_desired = zeros(4,5);

% desired features EXTRACTION
for b=1:4 % balls
    for s=1:5 % spots
        while ~sync % until i dont get valid values
            [~, l_position]=vrep.simxGetObjectPosition(clientID, h_L(b,s), h_VS, vrep.simx_opmode_streaming);
            sync = norm(l_position,2)~=0;
        end
        sync=false;
        
        % here you have all landmark positions in image plane
        us_desired(b,s)= fl*l_position(1)/l_position(3);
        vs_desired(b,s)= fl*l_position(2)/l_position(3);
        
    end
end

% null desired force and torque
force_torque_d=zeros(6,1);

% end effector home pose (THIS NEEDS TO BE CORRECTED)
ee_pose_d=[ -1.5413e+0;   -4.0699e-2;    +7.2534e-1;  -1.80e+2;         0;         0];

%%
%	PROCESS LOOP
%%

% two possible control modes:
    % mode 0: go-to-home control mode; 
    % mode 1: visual servoing eye-on-hand control mode;
mode=0;

% mode 0 overview:
	% i) features and depth extraction

	% ii) building image jacobian and computing the error (vision-based only)
			
	% iii) adjusting the error (via the force-based infos)
	
    % iv) computing the ee displacement	
    
	% v) updating the pose

% mode 1 is just a Cartesian proportionale regulator

%start from landmark h+1
h=1-1;

% loop
disp("------- STARTING -------");
time = 0; % time costant useful for plot ecc.
while h<6
    
    if mode==1
        
        %%
        %	I) FEATURES and DEPTH EXTRACTION
        %%

        us_current = zeros(4,1);
        vs_currect = zeros(4,1);
        zs_current = zeros(4,1);
        
        % GETTING CURRECT POSITION OF EE IN IMAGE PLANE
        for b=1:4 % balls
            while ~sync  % until i dont get valid values
                [~, l_position]=vrep.simxGetObjectPosition(clientID, h_L_EE(b), h_VS, vrep.simx_opmode_streaming);
                sync = norm(l_position,2)~=0;
            end
            sync=false;
           
            zs_current(b)= l_position(3);
            us_current(b)= fl*l_position(1)/l_position(3);
            vs_currect(b)= fl*l_position(2)/l_position(3);
            
        end
        
        time = time +1;
        
        %%
        %	II) BUILDING the IMAGE JACOBIAN and COMPUTING THE ERROR (vision-based only)
        %%
        
        % building the jacobian
        INTERACTION = [ build_point_jacobian(us_current(1),vs_currect(1),zs_current(1),fl); ...
              build_point_jacobian(us_current(2),vs_currect(2),zs_current(2),fl); ...
              build_point_jacobian(us_current(3),vs_currect(3),zs_current(3),fl); ...
              build_point_jacobian(us_current(4),vs_currect(4),zs_current(4),fl)]; 
        
        
        % computing the error
        err= [us_desired(1,h)-us_current(1); ...
              vs_desired(1,h)-vs_currect(1); ...
              us_desired(2,h)-us_current(2); ...
              vs_desired(2,h)-vs_currect(2); ...
              us_desired(3,h)-us_current(3); ...
              vs_desired(3,h)-vs_currect(3); ...
              us_desired(4,h)-us_current(4); ...
              vs_desired(4,h)-vs_currect(4)];
        
        % norm(err,2)
        
        % evaluating exit condition
        if norm(err,2)<=10^-4
           if h==5 % last spot
               break;
           end
           mode=0;
           pause(2);
           disp("---------- OK ----------");
           continue;
        end
        %
        
        %%
        %	III) ADJUSTING the ERROR (via the force-based infos)
        %
           
        while ~sync
            [~, ~, force, torque]=vrep.simxReadForceSensor(clientID, h_FS, vrep.simx_opmode_streaming);
            sync = true; %norm(force,2)~=0;
        end
        sync=false;
        %
        force_torque=[force'; torque'];
        force_torque=round(force_torque,2);
        %
        force_correction = INTERACTION*COMPLIANCE*(force_torque_d-force_torque);
        err = err + force_correction;
        
        time = time +1;
        
%         if mod(time,10)==0
%             disp( norm(err));
%         end
        
        if mod(time,10)==0 && norm(force_torque)~=0
            disp(["force sensor: ",force_torque']);
        end
        
        %%
        %	IV) COMPUTING the EE DISPLACEMENT
        %%
        
           
        
        % THIS NEEDS TO BE FIXED sostituire h_EE con h_j6?
        while ~sync
            [~, abg]=vrep.simxGetObjectOrientation(clientID, h_VS, h_EE, vrep.simx_opmode_streaming);
            sync = norm(abg,2)~=0;
        end
        sync=false;
        
        % THIS NEEDS TO BE FIXED
        while ~sync
            [~, tr]=vrep.simxGetObjectPosition(clientID, h_VS, h_EE, vrep.simx_opmode_streaming);
            sync = norm(tr,2)~=0;
        end
        sync=false;
                
        % computing the displacement
        ee_displacement = K*pinv(-INTERACTION)*err;
        
        if norm(ee_displacement,2)<10^-2.5 %10^-2.9
            ee_displacement = (ee_displacement/norm(ee_displacement,2))*10^-2.5;
        end
        %
        
        %%
        %	V) UPDATING THE POSE
        %%

        % getting the current pose
        
        while ~sync
            [~, ee_position]=vrep.simxGetObjectPosition(clientID, h_EE, h_VS, vrep.simx_opmode_streaming);
            sync = norm(ee_position,2)~=0;
        end
        sync=false;
        
        while ~sync
            [~, ee_orientation]=vrep.simxGetObjectOrientation(clientID, h_EE, h_VS, vrep.simx_opmode_streaming);
            sync = norm(ee_orientation,2)~=0;
        end
        sync=false;
        
        ee_pose= [ee_position, ee_orientation]'; 
        
        
        % updating the pose
        ee_pose= ee_pose + ee_displacement;
        [~]= vrep.simxSetObjectPosition(clientID, h_EE, h_VS, ee_pose(1:3), vrep.simx_opmode_oneshot);
        [~]= vrep.simxSetObjectOrientation(clientID, h_EE, h_VS, ee_pose(4:6), vrep.simx_opmode_oneshot);
        
        
    elseif mode==0
        
        % once inverse kinematics is done you can subs all this with inverse_kin
        while ~sync
            
            % relativeToObjectHandle = h_RCM defined upward
            [~, ee_position_relative]=vrep.simxGetObjectPosition(ID, h_j6, relativeToObjectHandle, vrep.simx_opmode_streaming);
            [~, ee_orientation_relative]=vrep.simxGetObjectOrientation(ID, h_j6, relativeToObjectHandle, vrep.simx_opmode_streaming);
            sync = norm(ee_position_relative,2)~=0;
        end
        sync=false;
        % getting the current pose
        
        while ~sync
            [~, ee_position]=vrep.simxGetObjectPosition(clientID, h_EE, -1, vrep.simx_opmode_streaming);
            sync = norm(ee_position,2)~=0;
        end
        sync=false;
        %
        while ~sync
            [~, ee_orientation]=vrep.simxGetObjectOrientation(clientID, h_EE, -1, vrep.simx_opmode_streaming);
            sync = norm(ee_orientation,2)~=0;
        end
        sync=false;
        %
        ee_pose= [ee_position, ee_orientation]'; 
        %
        
        %computing the error
        err=[ee_pose_d(1:3) - ee_pose(1:3); angdiff(ee_pose(4:6), ee_pose_d(4:6)) ];
        %
        
        % evaluating exit condition
        if max(err)<=0.001
           mode=1;
           h=h+1;
           fprintf(1,'GOING TOWARD LANDMARK: %d \n',h);
           
           
           pause(1);
           time = 0;
           continue;
        end
        %
        
        %computing the displacement
        ee_displacement = H*err;
        %

        %updating the pose
        ee_pose= ee_pose + ee_displacement;
        [~]= vrep.simxSetObjectPosition(clientID, h_EE, -1, ee_pose(1:3), vrep.simx_opmode_oneshot);
        [~]= vrep.simxSetObjectOrientation(clientID, h_EE, -1, ee_pose(4:6), vrep.simx_opmode_oneshot);
        %   
    end
        
    pause(0.05);
end

disp("############ PROCESS ENDED ############");

%%
%	FUNCTIONS
%%


function [clientID,vrep] = init_connection()

    fprintf(1,'START...  \n');
    vrep=remApi('remoteApi'); % using the prototype file (remoteApiProto.m)
    vrep.simxFinish(-1); % just in case, close all opened connections
    clientID=vrep.simxStart('127.0.0.1',19999,true,true,5000,5);
    fprintf(1,'client %d\n', clientID);
    if (clientID > -1)
        fprintf(1,'Connection: OK... \n');
    else
        fprintf(2,'Connection: ERROR \n');
        return;
    end
end

function [J] = build_point_jacobian(u,v,z,fl)
    J = [ -fl/z     0          u/z     (u*v)/fl        -(fl+(u^2)/fl)      v; ...
          0         -fl/z      v/z     (fl+(v^2)/fl)    -(u*v)/fl          -u];

end

%%
%	OLD
%%

%{    
    %getting the features
    if ~isempty(image)
        fs=extract_features(image, grays);
    end
%}

function [fs] = extract_features(image, grays)
    %
    fs=zeros(4,1);
    %
    rimage=image(:,:,1);
    gimage=image(:,:,2);
    bimage=image(:,:,3);
    %
    for k=1:4
        %
        raw = (rimage==grays(k) & gimage==grays(k) & bimage==grays(k));
        %
        [J,I]=ind2sub(size(image),find(raw));
        %
        jmin=min(J);
        jmax=max(J);
        imin=min(I);
        imax=max(I);
        %
        fs(k,[1, 2])=[jmin+(jmax-jmin)/2, imin+(imax-imin)/2]; 
        %
    end
end